plugins {
    id 'cpp-library'
    id 'maven-publish'
}

group = 'org.gradle.cpp-samples'
// Encode the Gradle metadata format in the version, until this is stable
version = '1.9.0-gr1-SNAPSHOT'

library {
    targetMachines = [
        machines.windows().x86_64(),
        machines.linux().x86_64(),
        machines.macOS().x86_64()
    ]
    source.from file('googletest/src/gtest-all.cc')
    publicHeaders.from file('googletest/include')
    privateHeaders.from file('googletest')
}

tasks.withType(CppCompile) {
    macros.put("GTEST_CREATE_SHARED_LIBRARY", '1')
    macros.put("_GLIBCXX_USE_CXX11_ABI", '0')

    println macros
    compilerArgs.addAll toolChain.map { NativeToolChain toolChain ->
        List<String> compilerSpecificArgs = []
        if (toolChain instanceof Gcc) {
            compilerSpecificArgs << '-std=c++03'
        }
        return compilerSpecificArgs
    }
}

tasks.withType(LinkSharedLibrary) {
    linkerArgs.addAll toolChain.map { NativeToolChain toolChain ->
        List<String> compilerSpecificArgs = []
        if (toolChain instanceof Gcc) {
            compilerSpecificArgs << '-std=c++03'
        }
        return compilerSpecificArgs
    }
    linkerArgs.addAll targetPlatform.map { NativePlatform targetPlatform ->
        List<String> platformSpecificArgs = []
        if (targetPlatform.operatingSystem.linux) {
            platformSpecificArgs << '-lpthread'
        }
        return platformSpecificArgs
    }
}

publishing {
    repositories {
        maven {
            url = 'https://repo.gradle.org/gradle/libs-snapshots-local'
            if (project.hasProperty("gartifactoryUsername") 
                && project.hasProperty("gartifactoryPassword")) {
                credentials {
                    username = gartifactoryUsername
                    password = gartifactoryPassword
                }
            }
        }
    }
}
